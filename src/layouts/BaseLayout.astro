---
import { ViewTransitions } from 'astro:transitions';

interface Props {
  title: string;
  description?: string;
}

const { title, description = "Roberto Guarneros - Aerospace & Network Engineer" } = Astro.props;
const currentPath = Astro.url.pathname;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body>
    <nav>
      <div class="nav-container">
        <a href="/" class="logo" aria-label="Home">
          <span class="logo-text">roberto</span>
        </a>
        <div class="nav-links">
          <a href="/" class={currentPath === '/' ? 'active' : ''}>about</a>
          <a href="/stats" class={currentPath === '/stats' ? 'active' : ''}>stats</a>
          <!-- Temporarily hidden until content is ready -->
          <!-- <a href="/blog" class={currentPath.startsWith('/blog') ? 'active' : ''}>blog</a> -->
          <!-- <a href="/cv" class={currentPath === '/cv' ? 'active' : ''}>cv</a> -->
          <button id="theme-toggle" aria-label="Toggle theme">
            <svg class="sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="5"></circle>
              <line x1="12" y1="1" x2="12" y2="3"></line>
              <line x1="12" y1="21" x2="12" y2="23"></line>
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
              <line x1="1" y1="12" x2="3" y2="12"></line>
              <line x1="21" y1="12" x2="23" y2="12"></line>
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
            </svg>
            <svg class="moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
            </svg>
          </button>
        </div>
      </div>
    </nav>

    <main>
      <slot />
    </main>

    <footer>
      <p>&copy; {new Date().getFullYear()} Roberto Guarneros.</p>
    </footer>

    <style is:global>
      :root {
        --bg-primary: #ffffff;
        --bg-secondary: #f8f9fa;
        --text-primary: #1a1a1a;
        --text-secondary: #6c757d;
        --accent: #3b82f6;
        --accent-hover: #2563eb;
        --border: #e9ecef;
        --code-bg: #f1f3f5;
        --transition: all 0.3s ease;
      }

      [data-theme="dark"] {
        --bg-primary: #0a0a0a;
        --bg-secondary: #111111;
        --text-primary: #e9ecef;
        --text-secondary: #adb5bd;
        --accent: #60a5fa;
        --accent-hover: #93c5fd;
        --border: #2d2d2d;
        --code-bg: #1a1a1a;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      html {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        background-color: var(--bg-primary);
        color: var(--text-primary);
        transition: var(--transition);
      }

      body {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        line-height: 1.6;
      }

      nav {
        background-color: var(--bg-primary);
        border-bottom: 1px solid var(--border);
        position: sticky;
        top: 0;
        z-index: 100;
        backdrop-filter: blur(10px);
        background-color: rgba(255, 255, 255, 0.8);
      }

      [data-theme="dark"] nav {
        background-color: rgba(10, 10, 10, 0.8);
      }

      .nav-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .logo {
        text-decoration: none;
        font-size: 1.25rem;
        font-weight: 700;
      }

      .logo-text {
        background: linear-gradient(135deg, var(--accent), #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      .nav-links {
        display: flex;
        gap: 2rem;
        align-items: center;
      }

      .nav-links a {
        color: var(--text-secondary);
        text-decoration: none;
        font-weight: 500;
        transition: var(--transition);
        position: relative;
      }

      .nav-links a:hover {
        color: var(--accent);
      }

      .nav-links a.active {
        color: var(--accent);
      }

      .nav-links a.active::after {
        content: '';
        position: absolute;
        bottom: -8px;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(90deg, var(--accent), #8b5cf6);
      }

      #theme-toggle {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        color: var(--text-secondary);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition);
        border-radius: 0.5rem;
      }

      #theme-toggle:hover {
        background-color: var(--bg-secondary);
        color: var(--accent);
      }

      .sun-icon {
        display: none;
      }

      .moon-icon {
        display: block;
      }

      [data-theme="dark"] .sun-icon {
        display: block;
      }

      [data-theme="dark"] .moon-icon {
        display: none;
      }

      main {
        flex: 1;
        max-width: 1200px;
        width: 100%;
        margin: 0 auto;
        padding: 4rem 2rem;
      }

      footer {
        background-color: var(--bg-secondary);
        padding: 2rem;
        text-align: center;
        color: var(--text-secondary);
        font-size: 0.875rem;
        border-top: 1px solid var(--border);
      }

      footer a {
        color: var(--accent);
        text-decoration: none;
      }

      footer a:hover {
        text-decoration: underline;
      }

      h1, h2, h3, h4, h5, h6 {
        color: var(--text-primary);
        margin-bottom: 1rem;
        font-weight: 700;
        background: linear-gradient(135deg, var(--text-primary), var(--accent));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      h1 {
        font-size: 3rem;
        line-height: 1.2;
      }

      h2 {
        font-size: 2rem;
      }

      p {
        margin-bottom: 1rem;
        color: var(--text-secondary);
      }

      a {
        color: var(--accent);
      }

      code {
        background-color: var(--code-bg);
        padding: 0.2rem 0.4rem;
        border-radius: 0.25rem;
        font-size: 0.875em;
        font-family: 'Monaco', 'Courier New', monospace;
      }

      pre {
        background-color: var(--code-bg);
        padding: 1rem;
        border-radius: 0.5rem;
        overflow-x: auto;
        margin-bottom: 1rem;
      }

      pre code {
        background: none;
        padding: 0;
      }

      @media (max-width: 768px) {
        .nav-container {
          padding: 1rem;
        }

        .nav-links {
          gap: 1rem;
          font-size: 0.875rem;
        }

        main {
          padding: 2rem 1rem;
        }

        h1 {
          font-size: 2rem;
        }

        h2 {
          font-size: 1.5rem;
        }
      }
    </style>

    <script is:inline>
      // Set theme immediately to prevent flash
      (function() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
      })();
    </script>

    <script>
      // Theme toggle functionality
      function setupThemeToggle() {
        const themeToggle = document.getElementById('theme-toggle');
        const html = document.documentElement;
        
        // Check for saved theme preference or default to light mode
        const currentTheme = localStorage.getItem('theme') || 'light';
        html.setAttribute('data-theme', currentTheme);

        themeToggle?.addEventListener('click', () => {
          const theme = html.getAttribute('data-theme');
          const newTheme = theme === 'light' ? 'dark' : 'light';
          html.setAttribute('data-theme', newTheme);
          localStorage.setItem('theme', newTheme);
        });
      }

      // Run on initial load
      setupThemeToggle();

      // Re-run after each page transition
      document.addEventListener('astro:after-swap', setupThemeToggle);
    </script>
  </body>
</html>
